#! /usr/bin/ruby

#--
###############################################################################
#                                                                             #
# hen -- Just a Rake helper                                                   #
#                                                                             #
# Copyright (C) 2007-2008 University of Cologne,                              #
#                         Albertus-Magnus-Platz,                              #
#                         50932 Cologne, Germany                              #
#                                                                             #
# Authors:                                                                    #
#     Jens Wille <jens.wille@uni-koeln.de>                                    #
#                                                                             #
# hen is free software; you can redistribute it and/or modify it under the    #
# terms of the GNU General Public License as published by the Free Software   #
# Foundation; either version 3 of the License, or (at your option) any later  #
# version.                                                                    #
#                                                                             #
# hen is distributed in the hope that it will be useful, but WITHOUT ANY      #
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   #
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more       #
# details.                                                                    #
#                                                                             #
# You should have received a copy of the GNU General Public License along     #
# with hen. If not, see <http://www.gnu.org/licenses/>.                       #
#                                                                             #
###############################################################################
#++

# TODO: Implement 'list' action -- List available hens with their tasks (?)

require 'rubygems'
require 'nuggets/enumerable/minmax'

$: << File.join(File.dirname(__FILE__), '..', 'lib')

require 'hen'
require 'hen/cli'

include Hen::CLI

ACTIONS = {
  'config' => 'Create a fresh .henrc file',
  'create' => [
    'Create a new project directory tree',
    'Arguments: path [sample-skeleton]'
  ],
  'list'   => 'List available hens with their tasks'
}

USAGE = <<EOT
Usage: #{$0} {#{ACTIONS.keys.sort.join('|')}} [action-arguments]
       #{$0} [-h|--help]
EOT

abort USAGE if ARGV.empty?

EXAMPLE = File.join(File.dirname(__FILE__), '..', 'example')

case action = ARGV.shift
  when '-h', '--help'
    puts USAGE
    puts
    puts 'Actions:'

    max = ACTIONS.keys.max(:length)

    ACTIONS.sort.each { |act, desc|
      desc = [*desc]
      puts "  %-#{max}s - %s" % [act, desc.shift]

      desc.each { |extra|
        puts "  %#{max}s   + %s" % [' ', extra]
      }
    }
  when 'config'
    render(File.join(EXAMPLE, '.henrc'), henrc = Hen.henrc(false))

    puts
    puts "Your .henrc has been created: #{henrc}. Now modify it to your needs."
  when 'create'
    path = File.expand_path(ARGV.shift)
    abort 'Path argument missing!' unless path

    skel = ARGV.shift || File.join(EXAMPLE, 'project')
    abort "Sample project tree not found: #{skel}" unless File.directory?(skel)

    if File.directory?(path)
      abort "Target directory already exists: #{path}. Won't touch."
    else
      Dir.mkdir(path)
    end

    # Parts to be replaced by the user
    replace = {}

    begin
      # Keep track of what's been created
      created = [path]

      # We need the name here so ask for it already. Additionally, it's
      # a good opportunity to make sure the user's .henrc is available.
      progname = ask!("Program's name", true)

      Dir.chdir(skel) {
        Dir['**/*'].each { |sample|
          target = File.join(path, sample.gsub(/__progname__/, progname))
          created << target

          if File.directory?(sample)
            Dir.mkdir(target)
          else
            replace[target] = render(sample, target).scan(/### .* ###/)
          end
        }
      }

      # If we got here, everything went fine...
      created.clear
    ensure
      # In case of an exception or premature program exit: Clean up!
      created.reverse.each { |p|
        (File.directory?(p) ? Dir : File).unlink(p) if File.readable?(p)
      }
    end

    puts
    puts "Your new project directory has been created: #{path}. Have fun!"

    replace.each { |target, details|
      next if details.empty?

      puts
      puts "#{target}:"

      details.each { |detail|
        puts "  #{detail}"
      }
    }
  when 'list'
    # How to achieve? Has to list *all* hens and tasks made available therein,
    # *regardless* of any missing prerequisites (preferably indicating whether
    # a particular hen/task is currently available).
    abort 'Sorry, not yet available...'
  else
    abort "Illegal action: #{action}\n#{USAGE}"
end
