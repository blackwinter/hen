#! /usr/bin/env ruby

#--
###############################################################################
#                                                                             #
# hen -- Just a Rake helper                                                   #
#                                                                             #
# Copyright (C) 2007-2011 University of Cologne,                              #
#                         Albertus-Magnus-Platz,                              #
#                         50923 Cologne, Germany                              #
#                                                                             #
# Authors:                                                                    #
#     Jens Wille <jens.wille@uni-koeln.de>                                    #
#                                                                             #
# hen is free software; you can redistribute it and/or modify it under the    #
# terms of the GNU Affero General Public License as published by the Free     #
# Software Foundation; either version 3 of the License, or (at your option)   #
# any later version.                                                          #
#                                                                             #
# hen is distributed in the hope that it will be useful, but WITHOUT ANY      #
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   #
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for     #
# more details.                                                               #
#                                                                             #
# You should have received a copy of the GNU Affero General Public License    #
# along with hen. If not, see <http://www.gnu.org/licenses/>.                 #
#                                                                             #
###############################################################################
#++

# TODO: Implement 'list' action -- List available hens with their tasks (?)

require 'hen/cli'
require 'fileutils'
require 'nuggets/enumerable/minmax'

include Hen::CLI

ACTIONS = {
  'config'  => 'Create a fresh .henrc file',
  'create'  => [
    'Create a new project directory tree',
    'Arguments: path [sample-skeleton]',
    'Options: -g, --git [[remote=]url]'
  ],
  'help'    => 'Print this help and exit',
  'list'    => 'List available hens with their tasks',
  'version' => 'Display version number'
}

USAGE = <<EOT
Usage: #{$0} {#{ACTIONS.keys.sort.join('|')}} [arguments] [options]
       #{$0} [-h|--help] [--version]
EOT

abort USAGE if ARGV.empty?

EXAMPLE = File.expand_path('../../example', __FILE__)

case arg = ARGV.shift
  when 'help', '-h', '--help'
    puts USAGE
    puts
    puts 'Actions:'

    max = ACTIONS.keys.max(:length)

    ACTIONS.sort.each { |action, description|
      description = [*description]
      puts "  %-#{max}s - %s" % [action, description.shift]

      description.each { |extra|
        puts "  %#{max}s   + %s" % [' ', extra]
      }
    }
  when 'version', '--version'
    puts "hen v#{Hen::VERSION}"
  when 'config'
    render(File.join(EXAMPLE, '_henrc'), henrc = Hen.default_henrc)

    puts
    puts "Your .henrc has been created: #{henrc}. Now adjust it to your needs."
  when 'create'
    path = File.expand_path(ARGV.shift)
    abort 'Path argument missing!' unless path

    skel = ARGV.first !~ /\A-/ && ARGV.shift || File.join(EXAMPLE, 'project')
    abort "Sample project tree not found: #{skel}" unless File.directory?(skel)

    # Keep track of what's been created
    created = []

    if File.directory?(path)
      abort "Target directory already exists: #{path}. Won't touch."
    else
      Dir.mkdir(path)
      created << path
    end

    if git = ARGV.index('-g') || ARGV.index('--git')
      ARGV.delete_at(git)
      remote = ARGV.delete_at(git)

      Dir.chdir(path) {
        if system('git', 'init')
          created << File.join(path, '.git')

          if remote
            url, label = remote.split('=', 2).reverse
            system('git', 'remote', 'add', label ||= 'origin', url)

            system('git', 'config', 'branch.master.remote', label)
            system('git', 'config', 'branch.master.merge', 'refs/heads/master')
          end
        end
      }
    end

    # Parts to be replaced by the user
    replace = {}

    begin
      # We need the name here, so ask for it already.
      progname = progname(File.basename(path))

      Dir.chdir(skel) {
        Dir['**/*'].each { |sample|
          target = File.join(path, sample.gsub(/__progname__/, progname))

          next if target.sub!(%r{(\A|/)[._](git[^/]+)\z}, '\1.\2') && !git

          created << target

          if File.directory?(sample)
            FileUtils.mkdir_p(target)
          else
            replace[target] = render(sample, target).scan(/### .+ ###/)
          end
        }
      }

      # If we got here, everything went fine...
      created.clear
    ensure
      # In case of an exception or premature program exit: Clean up!
      created.reverse.each { |item|
        next unless File.exist?(item)

        begin
          (File.directory?(item) ? Dir : File).unlink(item)
        rescue Errno::ENOTEMPTY => err
          File.basename(item) == '.git' ? FileUtils.rm_rf(item) : raise(err)
        end
      }
    end

    puts
    puts "Your new project directory has been created: #{path}. Have fun!"

    replace.each { |target, details|
      next if details.empty?

      puts
      puts "#{target}:"

      details.each { |detail|
        puts "  #{detail}"
      }
    }
  when 'list'
    # How to achieve? Has to list *all* hens and tasks made available therein,
    # *regardless* of any missing prerequisites (preferably indicating whether
    # a particular hen/task is currently available).
    abort 'Sorry, not yet available...'
  else
    abort "Illegal action: #{arg}\n#{USAGE}"
end
